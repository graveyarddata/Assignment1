{
  "components": {
    "comp-download-data": {
      "executorLabel": "exec-download-data",
      "inputDefinitions": {
        "parameters": {
          "bucket": {
            "parameterType": "STRING"
          },
          "file_name": {
            "parameterType": "STRING"
          },
          "project_id": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-evaluate-and-promote": {
      "executorLabel": "exec-evaluate-and-promote",
      "inputDefinitions": {
        "artifacts": {
          "model_art": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          },
          "test_ds": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        },
        "parameters": {
          "model_dir": {
            "parameterType": "STRING"
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "metrics": {
            "artifactType": {
              "schemaTitle": "system.Metrics",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-preprocess": {
      "executorLabel": "exec-preprocess",
      "inputDefinitions": {
        "artifacts": {
          "dataset": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "test_out": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          },
          "train_out": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    },
    "comp-train": {
      "executorLabel": "exec-train",
      "inputDefinitions": {
        "artifacts": {
          "train_ds": {
            "artifactType": {
              "schemaTitle": "system.Dataset",
              "schemaVersion": "0.0.1"
            }
          }
        }
      },
      "outputDefinitions": {
        "artifacts": {
          "model_art": {
            "artifactType": {
              "schemaTitle": "system.Model",
              "schemaVersion": "0.0.1"
            }
          }
        }
      }
    }
  },
  "deploymentSpec": {
    "executors": {
      "exec-download-data": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "download_data"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas' 'google-cloud-storage'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef download_data(project_id: str,\n                  bucket: str,\n                  file_name: str,\n                  dataset: Output[Dataset]):\n    \"\"\"Download data\"\"\"\n    from google.cloud import storage\n    import pandas as pd\n    import logging\n    import sys\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    client = storage.Client(project=project_id)\n    bucket = client.bucket(bucket)\n    blob = bucket.blob(file_name)\n    blob.download_to_filename(dataset.path + '.csv')\n    logging.info(f\"Downloaded to {local_csv}\")\n\n"
          ],
          "image": "python:3.10.7-slim"
        }
      },
      "exec-evaluate-and-promote": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "evaluate_and_promote"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas' 'joblib' 'gcsfs' 'fsspec'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef evaluate_and_promote(test_ds: Input[Dataset],\n                         model_art: Input[Model],\n                         metrics: Output[Metrics],\n                         model_dir: str):\n    \"\"\"evaluate\"\"\"\n\n    import pandas as pd\n    import joblib\n    import json\n    import fsspec\n    import os\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.read_csv(test_ds.path + \".csv\")\n    X = df[[\"bill_length_mm\",\"bill_depth_mm\",\"flipper_length_mm\",\"body_mass_g\"]]\n    y = df[\"species\"]\n\n    model = joblib.load(model_art.path + \".pkl\")\n    acc = float((model.predict(X) == y).mean())\n    metrics.log_metric(\"accuracy\", acc)\n\n    # Promote to your single model location (no champion subfolder per your choice)\n    fs = fsspec.filesystem(\"gcs\")\n    proj_model_dir = model_dir.rstrip(\"/\")\n    fs.put(model_art.path + \".pkl\",        f\"{proj_model_dir}/model.pkl\")\n    fs.put(model_art.path + \"_meta.json\",  f\"{proj_model_dir}/model_meta.json\")\n    # optional metrics file\n    with fs.open(f\"{proj_model_dir}/metrics.json\",\"w\") as f:\n        json.dump({\"accuracy\": acc}, f)\n\n"
          ],
          "image": "python:3.10.7-slim"
        }
      },
      "exec-preprocess": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "preprocess"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef preprocess(dataset: Input[Dataset],\n               train_out: Output[Dataset],\n               test_out: Output[Dataset]):\n\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    cols = [\"bill_length_mm\",\"bill_depth_mm\",\"flipper_length_mm\",\"body_mass_g\",\"species\"]\n    df = pd.read_csv(dataset.path + \".csv\")[cols].dropna()\n    train, test = train_test_split(df, test_size=0.2, random_state=42, stratify=df[\"species\"])\n    train.to_csv(train_out.path + \".csv\", index=False)\n    test.to_csv(test_out.path + \".csv\", index=False)\n\n"
          ],
          "image": "python:3.10.7-slim"
        }
      },
      "exec-train": {
        "container": {
          "args": [
            "--executor_input",
            "{{$}}",
            "--function_to_execute",
            "train"
          ],
          "command": [
            "sh",
            "-c",
            "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn' 'joblib'  &&  python3 -m pip install --quiet --no-warn-script-location 'kfp==2.14.6' '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"$0\" \"$@\"\n",
            "sh",
            "-ec",
            "program_path=$(mktemp -d)\n\nprintf \"%s\" \"$0\" > \"$program_path/ephemeral_component.py\"\n_KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         \"$program_path/ephemeral_component.py\"                         \"$@\"\n",
            "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import *\n\ndef train(train_ds: Input[Dataset],\n          model_art: Output[Model]):\n    import pandas as pd\n    import joblib\n    import json\n    import os\n    from sklearn.preprocessing import StandardScaler\n    from sklearn.linear_model import LogisticRegression\n    from sklearn.pipeline import Pipeline\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    df = pd.read_csv(train_ds.path + \".csv\")\n    X = df[[\"bill_length_mm\",\"bill_depth_mm\",\"flipper_length_mm\",\"body_mass_g\"]]\n    y = df[\"species\"]\n\n    pipe = Pipeline([\n        (\"scaler\", StandardScaler()),\n        (\"clf\", LogisticRegression(max_iter=500, multi_class=\"ovr\", random_state=42))\n    ]).fit(X, y)\n\n    joblib.dump(pipe, model_art.path + \".pkl\")\n    with open(model_art.path + \"_meta.json\",\"w\") as f:\n        json.dump({\"classes\": sorted(y.unique())}, f)\n\n"
          ],
          "image": "python:3.10.7-slim"
        }
      }
    }
  },
  "pipelineInfo": {
    "name": "penguins-pipeline"
  },
  "root": {
    "dag": {
      "tasks": {
        "download-data": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-download-data"
          },
          "inputs": {
            "parameters": {
              "bucket": {
                "runtimeValue": {
                  "constant": "assignment1group3"
                }
              },
              "file_name": {
                "runtimeValue": {
                  "constant": "data/penguins.csv"
                }
              },
              "project_id": {
                "runtimeValue": {
                  "constant": "assignment1"
                }
              }
            }
          },
          "taskInfo": {
            "name": "download-data"
          }
        },
        "evaluate-and-promote": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-evaluate-and-promote"
          },
          "dependentTasks": [
            "preprocess",
            "train"
          ],
          "inputs": {
            "artifacts": {
              "model_art": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "model_art",
                  "producerTask": "train"
                }
              },
              "test_ds": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "test_out",
                  "producerTask": "preprocess"
                }
              }
            },
            "parameters": {
              "model_dir": {
                "runtimeValue": {
                  "constant": "gs://assignment1group3/model"
                }
              }
            }
          },
          "taskInfo": {
            "name": "evaluate-and-promote"
          }
        },
        "preprocess": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-preprocess"
          },
          "dependentTasks": [
            "download-data"
          ],
          "inputs": {
            "artifacts": {
              "dataset": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "dataset",
                  "producerTask": "download-data"
                }
              }
            }
          },
          "taskInfo": {
            "name": "preprocess"
          }
        },
        "train": {
          "cachingOptions": {
            "enableCache": true
          },
          "componentRef": {
            "name": "comp-train"
          },
          "dependentTasks": [
            "preprocess"
          ],
          "inputs": {
            "artifacts": {
              "train_ds": {
                "taskOutputArtifact": {
                  "outputArtifactKey": "train_out",
                  "producerTask": "preprocess"
                }
              }
            }
          },
          "taskInfo": {
            "name": "train"
          }
        }
      }
    },
    "inputDefinitions": {
      "parameters": {
        "run_id": {
          "defaultValue": "manual-run",
          "isOptional": true,
          "parameterType": "STRING"
        }
      }
    }
  },
  "schemaVersion": "2.1.0",
  "sdkVersion": "kfp-2.14.6"
}